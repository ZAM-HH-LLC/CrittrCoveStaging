files:
  "/var/app/staging/db_setup.py":
    mode: "000755"
    owner: webapp
    group: webapp
    content: |
      import os
      import time
      import sys
      import logging
      import psycopg2
      from urllib.parse import urlparse

      # Setup logging
      logging.basicConfig(level=logging.INFO)
      logger = logging.getLogger('db_setup')

      def test_database_connection():
          """Test database connection and wait if necessary."""
          logger.info('Testing database connection...')
          
          # Get database URL from environment
          db_url = os.environ.get('DATABASE_URL')
          
          if not db_url:
              logger.error('DATABASE_URL environment variable not set!')
              return False
          
          # Parse the URL
          parse_result = urlparse(db_url)
          dbname = parse_result.path[1:]
          user = parse_result.username
          password = parse_result.password
          host = parse_result.hostname
          port = parse_result.port
          
          # Try to connect
          max_attempts = 5
          attempt = 0
          
          while attempt < max_attempts:
              attempt += 1
              try:
                  logger.info(f'Attempting database connection (attempt {attempt}/{max_attempts})...')
                  conn = psycopg2.connect(
                      dbname=dbname,
                      user=user,
                      password=password,
                      host=host,
                      port=port
                  )
                  cursor = conn.cursor()
                  cursor.execute('SELECT 1')
                  cursor.close()
                  conn.close()
                  logger.info('Successfully connected to the database!')
                  return True
              except Exception as e:
                  logger.error(f'Database connection failed: {str(e)}')
                  if attempt < max_attempts:
                      logger.info(f'Waiting 5 seconds before retrying...')
                      time.sleep(5)
                  else:
                      logger.error('Max attempts reached. Giving up.')
          
          return False

      if __name__ == '__main__':
          result = test_database_connection()
          if not result:
              logger.warning('Database connection tests failed, but continuing deployment')
              # Exit with 0 to not fail the deployment
              sys.exit(0)
          else:
              logger.info('Database setup completed successfully')

container_commands:
  00_test_db_connection:
    command: "cd /var/app/staging && python db_setup.py"
    leader_only: true 