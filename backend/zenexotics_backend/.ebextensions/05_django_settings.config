files:
  "/var/app/staging/db_settings_patch.py":
    mode: "000755"
    owner: webapp
    group: webapp
    content: |
      """
      This script patches Django settings to better handle database connections
      in an Elastic Beanstalk environment.
      """
      import os
      import logging
      
      # Setup logging
      logging.basicConfig(level=logging.INFO)
      logger = logging.getLogger('db_settings_patch')
      
      # Path to the Django settings file (adjust as needed)
      settings_file = 'zenexotics_backend/settings.py'
      
      if not os.path.exists(settings_file):
          logger.error(f"Settings file not found at {settings_file}")
          exit(0)
      
      # Read the current settings file
      with open(settings_file, 'r') as f:
          content = f.read()
      
      # Add DB connection timeout settings if not present
      if 'CONN_MAX_AGE' not in content:
          logger.info("Adding DB connection timeout settings...")
          
          # Find the DATABASES section
          db_section_start = content.find('DATABASES = {')
          if db_section_start > -1:
              # Find the default database section
              default_db_start = content.find("'default':", db_section_start)
              if default_db_start > -1:
                  # Find the closing brace of the default database dict
                  default_db_content_start = content.find('{', default_db_start)
                  if default_db_content_start > -1:
                      closing_brace_index = -1
                      brace_count = 1
                      for i in range(default_db_content_start + 1, len(content)):
                          if content[i] == '{':
                              brace_count += 1
                          elif content[i] == '}':
                              brace_count -= 1
                          if brace_count == 0:
                              closing_brace_index = i
                              break
                      
                      if closing_brace_index > -1:
                          # Insert connection settings
                          new_content = (
                              content[:closing_brace_index] + 
                              ",\n        'CONN_MAX_AGE': 60,\n        'OPTIONS': {\n            'connect_timeout': 5,\n        }" +
                              content[closing_brace_index:]
                          )
                          
                          # Write the updated content
                          with open(settings_file, 'w') as f:
                              f.write(new_content)
                          
                          logger.info("Successfully updated database settings!")
                      else:
                          logger.error("Failed to find closing brace for default database dict")
                  else:
                      logger.error("Failed to find default database dict opening")
              else:
                  logger.error("Failed to find 'default' database")
          else:
              logger.error("Failed to find DATABASES section")
      else:
          logger.info("DB connection timeout settings already present, no changes needed")
      
      # Add ATOMIC_REQUESTS setting if needed
      if 'ATOMIC_REQUESTS' not in content:
          logger.info("Adding ATOMIC_REQUESTS setting...")
          
          # Find the DATABASES section
          db_section_start = content.find('DATABASES = {')
          if db_section_start > -1:
              # Find the default database section
              default_db_start = content.find("'default':", db_section_start)
              if default_db_start > -1:
                  # Find the opening brace of the default database dict
                  default_db_content_start = content.find('{', default_db_start)
                  if default_db_content_start > -1:
                      # Insert ATOMIC_REQUESTS setting
                      new_content = (
                          content[:default_db_content_start+1] + 
                          "\n        'ATOMIC_REQUESTS': True," +
                          content[default_db_content_start+1:]
                      )
                      
                      # Write the updated content
                      with open(settings_file, 'w') as f:
                          f.write(new_content)
                      
                      logger.info("Successfully added ATOMIC_REQUESTS setting!")
                  else:
                      logger.error("Failed to find default database dict opening")
              else:
                  logger.error("Failed to find 'default' database")
          else:
              logger.error("Failed to find DATABASES section")
      else:
          logger.info("ATOMIC_REQUESTS setting already present, no changes needed")

container_commands:
  01_patch_django_settings:
    command: "cd /var/app/staging && python db_settings_patch.py"
    leader_only: true 