Always respond with what you are fixing, and never remove comments or edit anything that you weren't instructed to edit. at the end of the code generation, make sure to include a little summary of what you did. Don't touch any styling when i don't ask you to. When adding debugging console.log messages in javascript files, make sure to prepend "MBA<random_number>" to the start of the conosle.log for easy searching (only use one random number for multiple console logs made in one change, when next change is requested, then you can change the random number). Make sure to mention what i need to use to filter for the logs. There should be no difference in variable naming conventions on variables that are supposed to match on front/backend. For example, if i have a unit_of_time variable on the backend, and it is sent to the frontend, then that is the variable the frontend should use to display it or for logic calculations. This application contains a front end and a backend. frontend is programmed in React native, and backend is programmed in Django with the rest framework as well. My goal is to get the MVP out to the public, and to do that, i need to connect all of my database tables to my frontend. You will be assisting me in this. If you are tasked with doing something on the frontend, you are allowed to completely ignore, and encouraged to delete, anything to do with is_prototype from AuthContext.js (except for touching it inside of AuthContext.js, or on the signin page). 

File Locations:
backend: /Users/mattaertker/Documents/GitHub/CrittrCoveStaging/backend/zenexotics_backend
frontend: /Users/mattaertker/Documents/GitHub/CrittrCoveStaging/CrittrCoveStaging

Time and Date Format Rules:
1. When sending data from frontend to backend:
   - Dates should be in "YYYY-MM-DD" format
   - Times should be in "HH:mm" format (24-hour/military)
   - All times should be in UTC
   - Use time_utils.js for all timezone conversions
2. When receiving data from backend:
   - Dates will be in "YYYY-MM-DD" format
   - Times will be in "HH:mm" format (24-hour/military)
   - All times will be in UTC
   - Use time_utils.js to convert to user's timezone for display
3. When any api request is sent to the backend (so when we are creating an api request in a composer session or chat session), if that api request contains a time object, we will need to store that time on the database in UTC (ALWAYS STORE IN UTC ON BACKEND DB). The frontend should be converting this time to/from UTC from the users timezone using the time_utils.js file located in the frontend. The backend will store and respond with this UTC timezone to the client for the client to then convert it again back to the user's timezone.
4. The same thing needs to happen with military time conversion. The database should always store times in military, but the user will be making the request to the backend always in military time as the frontend should convert the non-military times (if non-military) to military times using the time_utils.js file on the frontend.
5. When converting times from the backend to the user's timezone/military time preferences, use the formatDateTimeRangeFromUTC function in time_utils.js if it is a date range (just a single start/end time returned for one occurrence), or if it is multiple occurrences, then we will need to use formatFromUTC or maybe formatDateTimeRangeFromUTC if it can handle a date time range between the same days. 

Extra instructions:
1. Try to reduce server load where it makes sense. For example, on the bookingstepmodal's first step: the service and pets editor shouldn't call the backend if the backend got a service and pet, unless and changes were done to it. Only call the backend when needed, or in the above example, when it has changes from the data recieved from the backend. 
2. When adding any frontend call to the backend, these should be done inside of CrittrCoveStaging/src/api/API.js with a sufficient comment above them with what the function is doing/sending and what it is responding with
3. When adding new debug messages with console.log on the frontend, make sure to use the authContext.js's debugLog function to print the message to the log if the is_DEBUG in authContext is true. The function is working for logging, so anytime cursor ai wants to add a console log, instead of console.log("message"), use debugLog("Message", dataForMessage); 
4. when adding error messages or anything of the sort, NEVER use alerts. Use modals instead for a more friendly user experience, and compatibility across platforms.
5. Anytime i ask you a question about anything, your job is to respond and think about the architecture like a senior software engineer would. 

Debugging:
1. If we encounter a 404 not found after making changes to frontend files, it is not a backend issue 99.999% of the time, even if we edit views and v1/urls.py, it still isn't the issue with the url being incorrect, it is almost always an import issue, using a variable that doesn't exist, or something like that.